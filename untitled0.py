# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gOvjvzwLZSQpy3tKcS0y77f-0KKfXHTk
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("smoking.csv")

# Rename columns for better readability
df.rename(columns={
    "Data.Daily cigarettes": "Daily_Cigarettes",
    "Data.Percentage.Male": "Percentage_Male",
    "Data.Percentage.Female": "Percentage_Female",
    "Data.Percentage.Total": "Percentage_Total",
    "Data.Smokers.Total": "Smokers_Total",
    "Data.Smokers.Female": "Smokers_Female",
    "Data.Smokers.Male": "Smokers_Male"
}, inplace=True)

# Get the number of rows and columns
num_rows, num_columns = df.shape

print(f"Number of rows: {num_rows}")
print(f"Number of columns: {num_columns}")


# Handle missing values
missing_values = df.isnull().sum()

# Display missing values per column
print("Missing values in each column:")
print(missing_values)


# Convert columns to appropriate data types
df["Year"] = df["Year"].astype(int)
df[["Daily_Cigarettes", "Percentage_Male", "Percentage_Female", "Percentage_Total"]] = \
    df[["Daily_Cigarettes", "Percentage_Male", "Percentage_Female", "Percentage_Total"]].astype(float)
df[["Smokers_Total", "Smokers_Female", "Smokers_Male"]] = \
    df[["Smokers_Total", "Smokers_Female", "Smokers_Male"]].astype(int)

# Remove duplicates
df.drop_duplicates(inplace=True)

# Display cleaned data summary
print(df.info())
print(df.head())



# Drop rows where Year is between 1991 and 2000
df = df[~df["Year"].between(1991, 2000)]

# Drop rows where Country is "World"
df = df[df["Country"] != "World"]

# Reset index after dropping rows
df.reset_index(drop=True, inplace=True)

# Check unique countries
unique_countries = df['Country'].nunique()
print("Number of unique countries:", unique_countries)

# Get the number of rows and columns
num_rows, num_columns = df.shape

print(f"Number of rows: {num_rows}")
print(f"Number of columns: {num_columns}")

# Display the first few rows after cleaning
print(df.head())

# Group by country and sum total smokers
top_countries = df.groupby("Country")["Smokers_Total"].sum().nlargest(5)

# Plot horizontal bar graph
plt.figure(figsize=(12, 6))
top_countries.sort_values().plot(kind="barh", color="magenta", edgecolor="black")

# Add text annotations to bars
for index, value in enumerate(top_countries.sort_values()):
    plt.text(value, index, f"{value:,}", va='center', fontsize=12, color='black')

# Add labels and title
plt.xlabel("Total Smokers")
plt.ylabel("Country")
plt.title("Top 5 Countries with Highest Total Smokers")

# Show the plot
plt.show()

# Group by country and find the highest smoking rate (Percentage_Total)
top_countries = df.groupby("Country")["Percentage_Total"].max().nlargest(5).sort_values(ascending=False)

# Increase figure size for better visibility
plt.figure(figsize=(14, 8))

# Plot vertical bar graph
bars = top_countries.plot(kind="bar", color="pink", edgecolor="black",fontsize=12)

# Add text annotations on top of bars
for index, value in enumerate(top_countries):
    plt.text(index, value + 1, f"{value:.2f}%",  # ðŸ”¹ Positioned text above bars
             ha='center', fontsize=15, color='black',
             bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.3'))

# Increase background space by setting y-axis limits
plt.ylim(0, top_countries.max() * 1.1)

# Add labels and title
plt.xlabel("Country",fontsize=12)
plt.ylabel("Smoking Rate (%)",fontsize=12)
plt.title("Top 5 Countries with the Highest Smoking Rate",fontsize=12)

# Show the plot
plt.show()

sns.boxplot(data=df[['Percentage_Male', 'Percentage_Female']],
            palette=["lightblue", "pink"],
            width=0.5, linewidth=1.5, fliersize=5,
            boxprops=dict(edgecolor="black"))
plt.title("Distribution of Smoking Rate by Gender", fontsize=16, fontweight='bold')
plt.ylabel("Smoking Rate (%)", fontsize=14)

# Filter data for India
india_df = df[df["Country"] == "India"]

# Set figure size
plt.figure(figsize=(12, 6))

# Plot line graph
sns.lineplot(x=india_df["Year"], y=india_df["Daily_Cigarettes"],
             marker="o", color="red", linewidth=2, markersize=6)

# Add labels and title
plt.xlabel("Year", fontsize=14)
plt.ylabel("Cigarettes Per Capita (Daily)", fontsize=14)
plt.title("Daily Trend of Cigarette Consumption in India", fontsize=16, fontweight="bold")
plt.grid(True, linestyle="--", alpha=0.7)

# Show the plot
plt.show()